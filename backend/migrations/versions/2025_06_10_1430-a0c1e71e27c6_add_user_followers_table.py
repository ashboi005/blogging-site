"""add_user_followers_table

Revision ID: a0c1e71e27c6
Revises: da5cf2a783c1
Create Date: 2025-06-10 14:30:10.940498

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a0c1e71e27c6'
down_revision: Union[str, None] = 'da5cf2a783c1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_followers',
    sa.Column('follower_id', sa.UUID(), nullable=False),
    sa.Column('following_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.CheckConstraint('follower_id != following_id', name='no_self_follow_check'),
    sa.ForeignKeyConstraint(['follower_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['following_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('follower_id', 'following_id', name='user_followers_pkey')
    )
    op.create_index('idx_follower_id', 'user_followers', ['follower_id'], unique=False)
    op.create_index('idx_following_id', 'user_followers', ['following_id'], unique=False)
    op.drop_index('idx_multipart_uploads_list', table_name='s3_multipart_uploads', schema='storage')
    op.drop_table('s3_multipart_uploads', schema='storage')
    op.drop_index('bucketid_objname', table_name='objects', schema='storage')
    op.drop_index('idx_objects_bucket_id_name', table_name='objects', schema='storage')
    op.drop_index('name_prefix_search', table_name='objects', schema='storage')
    op.drop_table('objects', schema='storage')
    op.drop_index('bname', table_name='buckets', schema='storage')
    op.drop_table('buckets', schema='storage')
    op.drop_table('schema_migrations', schema='realtime')
    op.drop_index('secrets_name_idx', table_name='secrets', schema='vault', postgresql_where='(name IS NOT NULL)')
    op.drop_table('secrets', schema='vault')
    op.drop_table('s3_multipart_uploads_parts', schema='storage')
    op.drop_table('migrations', schema='storage')
    op.drop_index('ix_realtime_subscription_entity', table_name='subscription', schema='realtime')
    op.drop_index('subscription_subscription_id_entity_filters_key', table_name='subscription', schema='realtime')
    op.drop_table('subscription', schema='realtime')
    op.drop_table('messages', schema='realtime')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('messages',
    sa.Column('topic', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('extension', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('event', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('private', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('inserted_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', 'inserted_at', name='messages_pkey'),
    schema='realtime'
    )
    op.create_table('subscription',
    sa.Column('id', sa.BIGINT(), sa.Identity(always=True, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1), autoincrement=True, nullable=False),
    sa.Column('subscription_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('entity', postgresql.REGCLASS(), autoincrement=False, nullable=False),
    sa.Column('filters', sa.NullType(), server_default=sa.text("'{}'::realtime.user_defined_filter[]"), autoincrement=False, nullable=False),
    sa.Column('claims', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('claims_role', sa.NullType(), sa.Computed("realtime.to_regrole((claims ->> 'role'::text))", persisted=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text("timezone('utc'::text, now())"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='pk_subscription'),
    schema='realtime'
    )
    op.create_index('subscription_subscription_id_entity_filters_key', 'subscription', ['subscription_id', 'entity', 'filters'], unique=False, schema='realtime')
    op.create_index('ix_realtime_subscription_entity', 'subscription', ['entity'], unique=False, schema='realtime')
    op.create_table('migrations',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('hash', sa.VARCHAR(length=40), autoincrement=False, nullable=False),
    sa.Column('executed_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='migrations_pkey'),
    sa.UniqueConstraint('name', name='migrations_name_key'),
    schema='storage'
    )
    op.create_table('s3_multipart_uploads_parts',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('upload_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('size', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('part_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('bucket_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('etag', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('version', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['bucket_id'], ['storage.buckets.id'], name='s3_multipart_uploads_parts_bucket_id_fkey'),
    sa.ForeignKeyConstraint(['upload_id'], ['storage.s3_multipart_uploads.id'], name='s3_multipart_uploads_parts_upload_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='s3_multipart_uploads_parts_pkey'),
    schema='storage'
    )
    op.create_table('secrets',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), server_default=sa.text("''::text"), autoincrement=False, nullable=False),
    sa.Column('secret', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('key_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('nonce', postgresql.BYTEA(), server_default=sa.text('vault._crypto_aead_det_noncegen()'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='secrets_pkey'),
    schema='vault',
    comment='Table with encrypted `secret` column for storing sensitive information on disk.'
    )
    op.create_index('secrets_name_idx', 'secrets', ['name'], unique=False, schema='vault', postgresql_where='(name IS NOT NULL)')
    op.create_table('schema_migrations',
    sa.Column('version', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('inserted_at', postgresql.TIMESTAMP(precision=0), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('version', name='schema_migrations_pkey'),
    schema='realtime'
    )
    op.create_table('buckets',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('owner', sa.UUID(), autoincrement=False, nullable=True, comment='Field is deprecated, use owner_id instead'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('avif_autodetection', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('file_size_limit', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('allowed_mime_types', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='buckets_pkey'),
    schema='storage',
    postgresql_ignore_search_path=False
    )
    op.create_index('bname', 'buckets', ['name'], unique=False, schema='storage')
    op.create_table('objects',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('bucket_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('owner', sa.UUID(), autoincrement=False, nullable=True, comment='Field is deprecated, use owner_id instead'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('last_accessed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('path_tokens', postgresql.ARRAY(sa.TEXT()), sa.Computed("string_to_array(name, '/'::text)", persisted=True), autoincrement=False, nullable=True),
    sa.Column('version', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('owner_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['bucket_id'], ['storage.buckets.id'], name='objects_bucketId_fkey'),
    sa.PrimaryKeyConstraint('id', name='objects_pkey'),
    schema='storage'
    )
    op.create_index('name_prefix_search', 'objects', ['name'], unique=False, schema='storage')
    op.create_index('idx_objects_bucket_id_name', 'objects', ['bucket_id', 'name'], unique=False, schema='storage')
    op.create_index('bucketid_objname', 'objects', ['bucket_id', 'name'], unique=False, schema='storage')
    op.create_table('s3_multipart_uploads',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('in_progress_size', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('upload_signature', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('bucket_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('version', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('owner_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('user_metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['bucket_id'], ['storage.buckets.id'], name='s3_multipart_uploads_bucket_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='s3_multipart_uploads_pkey'),
    schema='storage'
    )
    op.create_index('idx_multipart_uploads_list', 's3_multipart_uploads', ['bucket_id', 'key', 'created_at'], unique=False, schema='storage')
    op.drop_index('idx_following_id', table_name='user_followers')
    op.drop_index('idx_follower_id', table_name='user_followers')
    op.drop_table('user_followers')
    # ### end Alembic commands ###
