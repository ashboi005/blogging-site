"""add blog tables and user interests

Revision ID: 58776a07e24a
Revises: a0c1e71e27c6
Create Date: 2025-06-10 17:44:13.110505

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '58776a07e24a'
down_revision: Union[str, None] = 'a0c1e71e27c6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('blogs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('cover_image_url', sa.String(length=500), nullable=True),
    sa.Column('is_published', sa.Boolean(), nullable=False),
    sa.Column('is_featured', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('published_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_blogs_created_at', 'blogs', ['created_at'], unique=False)
    op.create_index('idx_blogs_published', 'blogs', ['is_published'], unique=False)
    op.create_index('idx_blogs_tags', 'blogs', ['tags'], unique=False)
    op.create_index('idx_blogs_title', 'blogs', ['title'], unique=False)
    op.create_table('blog_authors',
    sa.Column('blog_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('is_primary_author', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['blog_id'], ['blogs.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('blog_id', 'user_id', name='blog_authors_pkey')
    )
    op.create_index('idx_blog_authors_blog_id', 'blog_authors', ['blog_id'], unique=False)
    op.create_index('idx_blog_authors_user_id', 'blog_authors', ['user_id'], unique=False)
    op.create_table('blog_comments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('blog_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('parent_comment_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['blog_id'], ['blogs.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_comment_id'], ['blog_comments.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_blog_comments_blog_id', 'blog_comments', ['blog_id'], unique=False)
    op.create_index('idx_blog_comments_created_at', 'blog_comments', ['created_at'], unique=False)
    op.create_index('idx_blog_comments_parent_id', 'blog_comments', ['parent_comment_id'], unique=False)
    op.create_index('idx_blog_comments_user_id', 'blog_comments', ['user_id'], unique=False)
    op.create_table('blog_likes',
    sa.Column('blog_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False),
    sa.ForeignKeyConstraint(['blog_id'], ['blogs.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['auth.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('blog_id', 'user_id', name='blog_likes_pkey')
    )
    op.create_index('idx_blog_likes_blog_id', 'blog_likes', ['blog_id'], unique=False)
    op.create_index('idx_blog_likes_user_id', 'blog_likes', ['user_id'], unique=False)
    
    # Add interests column as nullable first
    op.add_column('user_profiles', sa.Column('interests', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    
    # Set default empty array for existing users
    op.execute("UPDATE user_profiles SET interests = '[]'::jsonb WHERE interests IS NULL")
    
    # Now make it NOT NULL
    op.alter_column('user_profiles', 'interests', nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('user_profiles', 'interests')
    op.drop_index('idx_blog_likes_user_id', table_name='blog_likes')
    op.drop_index('idx_blog_likes_blog_id', table_name='blog_likes')
    op.drop_table('blog_likes')
    op.drop_index('idx_blog_comments_user_id', table_name='blog_comments')
    op.drop_index('idx_blog_comments_parent_id', table_name='blog_comments')
    op.drop_index('idx_blog_comments_created_at', table_name='blog_comments')
    op.drop_index('idx_blog_comments_blog_id', table_name='blog_comments')
    op.drop_table('blog_comments')
    op.drop_index('idx_blog_authors_user_id', table_name='blog_authors')
    op.drop_index('idx_blog_authors_blog_id', table_name='blog_authors')
    op.drop_table('blog_authors')
    op.drop_index('idx_blogs_title', table_name='blogs')
    op.drop_index('idx_blogs_tags', table_name='blogs')
    op.drop_index('idx_blogs_published', table_name='blogs')
    op.drop_index('idx_blogs_created_at', table_name='blogs')
    op.drop_table('blogs')
    # ### end Alembic commands ###
